/*
 * Copyright 2022 Rik Griffin <rik.grf@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *
 *    2. Redistributions in binary form must reproduce the above copyright notice,
 *       this list of conditions and the following disclaimer in the documentation
 *       and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY R GRIFFIN "AS IS" AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL R GRIFFIN OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <limits.h>
#include <ctype.h>


/* strcmp, case insensitive	*/
static int strcmp_nc(const char *a, const char *b) {
  int ac, bc;
  for (;;) {
    ac = toupper(*a++);
    bc = toupper(*b++);
    if (ac != bc) return ac - bc;
    if (ac == '\0') return 0;
  };
  return 0;
}


static char *strdup(const char *a) {
  char *b;
  int len;
  len = strlen(a) + 1;
  if ((b = (char *) malloc(len)) == NULL) return NULL;
  memcpy(b, a, len);
  return b;
}


static void usage(void) {
  printf("bin2c -in <file> [-out <file>] [-header <header>] [-footer <footer>] [-wdith <width>] [-indent <indent>] [-word]\n");
}


int main(int argc, char *argv[]) {
  FILE *in_f = stdin, *out_f = stdout;
  char *header = "", *footer = "", *indent = "";
  int i, indent_size = 2, width = 80, word = 0;

  for (i = 0; i < argc; i++) {
    if (strcmp_nc(argv[i], "-help") == 0) {
      usage();
      return EXIT_SUCCESS;

    } else if (strcmp_nc(argv[i], "-in") == 0) {
      if ((in_f = fopen(argv[++i], "rb")) == NULL) {
        fprintf(stderr, "Can't open input file\n");
        goto fail;
      }

    } else if (strcmp_nc(argv[i], "-out") == 0) {
      if ((out_f = fopen(argv[++i], "wb")) == NULL) {
        fprintf(stderr, "Can't open output file\n");
        goto fail;
      }

    } else if (strcmp_nc(argv[i], "-header") == 0) {
      header = strdup(argv[++i]);

    } else if (strcmp_nc(argv[i], "-footer") == 0) {
      footer = strdup(argv[++i]);

    } else if (strcmp_nc(argv[i], "-width") == 0) {
      width = atoi(argv[++i]);

    } else if (strcmp_nc(argv[i], "-indent") == 0) {
      indent_size = atoi(argv[++i]);

    } else if (strcmp_nc(argv[i], "-word") == 0) {
      word = 1;
    }
  }

  indent = malloc(indent_size + 1);
  memset(indent, 0x20, indent_size);
  indent[indent_size] = '\0';

  i = INT_MAX;

  fprintf(out_f, "%s", header);

  while (!feof(in_f)) {
    int v, n = 4;

    if (i >= width) {
      i = fprintf(out_f, "%s%s", i == INT_MAX ? "" : "\n", indent) - 1;
    }

    if (word) {

      if ((n = fread(&v, 1, 4, in_f)) > 0) {
        i += fprintf(out_f, "0x%08x", v);
      }

    } else {

      if ((v = fgetc(in_f)) != EOF) {
        i += fprintf(out_f, "0x%02x", v);
      }
    }

    /* A comma after the last element in an array initialiser is valid C	*/
    /* eg char x[] = { 1, 2, 3, };						*/
    if (!feof(in_f)) i += fprintf(out_f, ", ");
  }

  fprintf(out_f, "%s%s\n", i > 0 ? "\n" : "", footer);

  if (in_f != stdin) fclose(in_f);
  if (out_f != stdout) fclose(out_f);

  return EXIT_SUCCESS;

fail:
  if (in_f != NULL && in_f != stdin) fclose(in_f);
  if (out_f != NULL && out_f != stdout) fclose(out_f);
  return EXIT_FAILURE;
}
